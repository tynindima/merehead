{"version":3,"sources":["getData.ts","story.ts","components/NewUser/NewUser.tsx","App.tsx","index.tsx"],"names":["URL_USER","getData","a","fetch","response","json","getUsers","postUser","user","method","headers","body","JSON","stringify","loadingUser","users","type","initialState","story","createStore","state","action","mapDispatchToProps","loadUsers","connect","props","useState","name","setName","surname","setSurname","desc","setDesc","hundleInput","event","target","id","value","onSubmit","preventDefault","then","htmlFor","onChange","useEffect","hundleDelete","deleteUser","className","map","key","onClick","ReactDOM","render","store","document","getElementById"],"mappings":"+OAAMA,EAAW,kCAEXC,EAAO,uCAAG,4BAAAC,EAAA,sEACSC,MAAM,GAAD,OAAIH,IADlB,cACRI,EADQ,yBAGPA,EAASC,QAHF,2CAAH,qDAMAC,EAAW,WACtB,OAAOL,KAGIM,EAAQ,uCAAG,WAAOC,GAAP,eAAAN,EAAA,sEACCC,MAAMH,EAAU,CACrCS,OAAQ,OACRC,QAAS,CAAE,eAAgB,mCAC3BC,KAAMC,KAAKC,UAAUL,KAJD,cAChBJ,EADgB,yBAOfA,EAASC,QAPM,2CAAH,sD,eCRRS,EAAc,SAACC,GAAD,MAAoB,CAAEC,KAF/B,YAEgDD,UAM5DE,EAAsB,CAC1BF,MAAO,IAiBMG,EAFDC,aAZE,WAA8C,IAA7CC,EAA4C,uDAApCH,EAAcI,EAAsB,uCAC3D,OAAQA,EAAOL,MACb,IAdc,YAeZ,OAAO,2BACFI,GADL,IAEEL,MAAOM,EAAON,QAElB,QACE,OAAOK,KAIsBH,G,OCuD7BK,EAAqB,CACzBC,UAAWT,GAGEU,cAAQ,KAAMF,EAAdE,EA5EY,SAACC,GAAW,IAC7BF,EAAcE,EAAdF,UAD4B,EAGZG,mBAAS,IAHG,mBAG7BC,EAH6B,KAGvBC,EAHuB,OAINF,mBAAS,IAJH,mBAI7BG,EAJ6B,KAIpBC,EAJoB,OAKZJ,mBAAS,IALG,mBAK7BK,EAL6B,KAKvBC,EALuB,KAO9BC,EAAc,SAACC,GAAgD,IAC3DC,EAAWD,EAAXC,OAER,OAAQA,EAAOC,IACb,IAAK,OACHR,EAAQO,EAAOE,OACf,MACF,IAAK,UACHP,EAAWK,EAAOE,OAClB,MACF,IAAK,OACHL,EAAQG,EAAOE,SAkBrB,OACE,oCACE,0BAAMC,SAbW,SAACJ,GACpBA,EAAMK,iBAIO,KAATZ,GAA2B,KAAZE,GAA2B,KAATE,GACnCxB,EAHW,CAAEoB,OAAME,UAASE,SAIzBS,KAAKjB,KAON,6BACE,2BAAOkB,QAAQ,QAAf,QACA,2BACEC,SAAUT,EACVI,MAAOV,EACPX,KAAK,OACLoB,GAAG,UAGP,6BACE,2BAAOK,QAAQ,WAAf,WACA,2BACEC,SAAUT,EACVI,MAAOR,EACPb,KAAK,OACLoB,GAAG,aAGP,6BACE,2BAAOK,QAAQ,QAAf,eACA,2BACEC,SAAUT,EACVI,MAAON,EACPf,KAAK,OACLoB,GAAG,UAGP,4BAAQpB,KAAK,UAAb,qBCnBFM,EAAqB,CACzBC,UAAWT,GAGEU,eARS,SAACJ,GAAD,MAAmB,CACzCL,MAAOK,EAAML,SAOyBO,EAAzBE,EA/CQ,SAACC,GAAW,IAE/BV,EAEEU,EAFFV,MACAQ,EACEE,EADFF,UAGFoB,qBAAU,WACRrC,IACGkC,KAAKjB,KACP,CAACA,IAEJ,IAAMqB,EAAe,SAACR,IHFE,SAACA,GACzBjC,MAAM,GAAD,OAAIH,EAAJ,YAAgBoC,GAAM,CACzB3B,OAAQ,WGCRoC,CAAWT,GACX9B,IACGkC,KAAKjB,IAGV,OACE,yBAAKuB,UAAU,OACb,wCACA,kBAAC,EAAD,MACA,4BACG/B,EAAMgC,KAAI,SAAAvC,GAAI,OACb,wBAAIwC,IAAKxC,EAAK4B,IAAd,UACM5B,EAAKmB,KADX,YACmBnB,EAAKqB,QADxB,YACmCrB,EAAKuB,MACtC,4BACEf,KAAK,SACLiC,QAAS,kBAAML,EAAapC,EAAK4B,MAFnC,mBC/BZc,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOlC,GACf,kBAAC,EAAD,OAEFmC,SAASC,eAAe,W","file":"static/js/main.baf8e22f.chunk.js","sourcesContent":["const URL_USER = 'http://localhost:5000/api/users';\n\nconst getData = async <T>(): Promise<T> => {\n  const response = await fetch(`${URL_USER}`);\n\n  return response.json();\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData();\n};\n\nexport const postUser = async (user: User) => {\n  const response = await fetch(URL_USER, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    body: JSON.stringify(user),\n  });\n\n  return response.json();\n};\n\nexport const deleteUser = (id: number | undefined) => {\n  fetch(`${URL_USER}/${id}`, {\n    method: 'DELETE',\n  });\n};\n","import { AnyAction, createStore } from 'redux';\n\nconst LOAD_USER = 'LOAD_USER';\n\nexport const loadingUser = (users: User[]) => ({ type: LOAD_USER, users });\n\nexport interface State {\n  users: User[] | [];\n}\n\nconst initialState: State = {\n  users: [],\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_USER:\n      return {\n        ...state,\n        users: action.users,\n      };\n    default:\n      return state;\n  }\n};\n\nconst story = createStore(reducer, initialState);\n\nexport default story;\n","import React, { FC, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { postUser } from '../../getData';\nimport { loadingUser } from '../../story';\n\ninterface Props {\n  loadUsers: (users: User[]) => void;\n}\n\nconst NewUser: FC<Props> = (props) => {\n  const { loadUsers } = props;\n\n  const [name, setName] = useState('');\n  const [surname, setSurname] = useState('');\n  const [desc, setDesc] = useState('');\n\n  const hundleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    switch (target.id) {\n      case 'name':\n        setName(target.value);\n        break;\n      case 'surname':\n        setSurname(target.value);\n        break;\n      case 'desc':\n        setDesc(target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const hundleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const user = { name, surname, desc };\n\n    if (name !== '' && surname !== '' && desc !== '') {\n      postUser(user)\n        .then(loadUsers);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={hundleSubmit}>\n        <div>\n          <label htmlFor=\"name\">Name</label>\n          <input\n            onChange={hundleInput}\n            value={name}\n            type=\"text\"\n            id=\"name\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"surname\">Surname</label>\n          <input\n            onChange={hundleInput}\n            value={surname}\n            type=\"text\"\n            id=\"surname\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"desc\">Description</label>\n          <input\n            onChange={hundleInput}\n            value={desc}\n            type=\"text\"\n            id=\"desc\"\n          />\n        </div>\n        <button type=\"submit\">Add new user</button>\n      </form>\n    </>\n  );\n};\n\nconst mapDispatchToProps = {\n  loadUsers: loadingUser,\n};\n\nexport default connect(null, mapDispatchToProps)(NewUser);\n","import React, { FC, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport './App.scss';\nimport {deleteUser, getUsers} from './getData';\nimport { loadingUser, State } from './story';\nimport NewUser from './components/NewUser/NewUser';\n\ninterface Props {\n  users: User[];\n  loadUsers: (users: User[]) => void;\n}\n\nconst App: FC<Props> = (props) => {\n  const {\n    users,\n    loadUsers,\n  } = props;\n\n  useEffect(() => {\n    getUsers()\n      .then(loadUsers);\n  }, [loadUsers]);\n\n  const hundleDelete = (id: number | undefined) => {\n    deleteUser(id);\n    getUsers()\n      .then(loadUsers);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Merehead</h1>\n      <NewUser />\n      <ul>\n        {users.map(user => (\n          <li key={user.id}>\n            {`${user.name} ${user.surname} ${user.desc}`}\n            <button\n              type=\"button\"\n              onClick={() => hundleDelete(user.id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  users: state.users,\n});\n\nconst mapDispatchToProps = {\n  loadUsers: loadingUser,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport story from './story';\n\nReactDOM.render(\n  <Provider store={story}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}